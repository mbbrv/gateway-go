// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "gateway-go/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionsRepository is an autogenerated mock type for the TransactionsRepository type
type TransactionsRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: transaction
func (_m *TransactionsRepository) CreateTransaction(transaction models.Transaction) error {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFailedUserTransactions provides a mock function with given fields: username
func (_m *TransactionsRepository) GetFailedUserTransactions(username string) []models.Transaction {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetFailedUserTransactions")
	}

	var r0 []models.Transaction
	if rf, ok := ret.Get(0).(func(string) []models.Transaction); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	return r0
}

// NewTransactionsRepository creates a new instance of TransactionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionsRepository {
	mock := &TransactionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
